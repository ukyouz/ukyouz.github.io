{"meta":{"title":"zhung's zone","subtitle":null,"description":null,"author":"Chih-hung Cheng","url":"http://ukyouz.github.io"},"pages":[{"title":"About Me","date":"2017-10-03T17:40:57.799Z","updated":"2017-09-30T16:00:00.000Z","comments":true,"path":"about/index.html","permalink":"http://ukyouz.github.io/about/index.html","excerpt":"","keywords":null,"text":"Summary 現為交大電子所學生，碩士研究記憶體相關領域。喜歡打打程式，興趣是寫網站，有空可以來我的作品集逛逛：zhung.com.tw。 Programming C, C++ System Verilog, Verilog JavaScript, PHP, MySQL Matlab Languages English Japanese Computer Skills Photoshop Illustrator Experience MediaTek - Internship 2017-07 ~ 2017-08 協助 Flash 記憶體固態物理知識的理解以及教學 以 C++/Matlab 製作 GUI Tool 建立自動化測試程式 以小組為單位完成微電影製作 TEDxHsinchu - 資訊部 2016-01 ~ 2016-06 於 Linode 上架設伺服器、以及 MySQL 資料庫 安裝 Laravel 框架，並製作後台功能和檔案管理系統 前端技術指導及支援 東京大學台灣留學生會 - 全端工程師 2015-05 ~ 2015-08 以 PHP 建置後台，方便其他部員管理 使用 XSLT 快速建立一致的版面、RWD 設計 重新定義網站整體風格，以東大校徽銀杏的綠色、黃色系(橘色)貫穿 Education National Chiao Tung University - Master 2016-02 ~ Now The University of Tokyo - Exchange 2014-10 ~ 2015-09 National Chiao Tung University - Bachelor 2011-09 ~ 2015-09","raw":null,"content":null}],"posts":[{"title":"TransEra HTBasic Syntax","slug":"others/htbasic","date":"2017-09-30T16:00:00.000Z","updated":"2017-10-23T17:08:22.727Z","comments":true,"path":"article/others/htbasic.html","link":"","permalink":"http://ukyouz.github.io/article/others/htbasic.html","excerpt":"HTBasic is the languange used by Trans Era, aiming for measurement equipment controlling usages. However, it is different from normal programming languages, there are specific syntax and kind of bugs when you code.","keywords":null,"text":"HTBasic is the languange used by Trans Era, aiming for measurement equipment controlling usages. However, it is different from normal programming languages, there are specific syntax and kind of bugs when you code. Loop Conditions While 123WHILE condition ...END WHILE For 123FOR X=1 TO N [STEP 1] ...NEXT X If STEP is not specified, default step value is 1. Loop 12345LOOP ...[EXIT IF condition] ...END LOOP EXIT IF stops and breaks the loop. Subprogram &amp; Function Subprogram can take parameters and does not return value. Function can also use parameters and return an INTEGER or a STRING. 12345678910111213141516171819! Main Program ... Area = FNSquare(Side) CALL Your_sub_name(@4156, Count, Numbers(*), Out$) PRINT FNRepeat_char$(&quot;-&quot;, 50)ENDSUB Your_sub_name(@meter, I, Arr(*), Str$) ...SUBENDDEF FNSquare(I) RETURN I*IFNENDDEF FNRepeat_char$(C$, I)FNEND Sometimes syntax error appears even if there is no syntax error, when this happen, copy all of your codes to a new file and save. That's it.","raw":null,"content":null,"categories":[{"name":"Instrument Control","slug":"Instrument-Control","permalink":"http://ukyouz.github.io/categories/Instrument-Control/"}],"tags":[{"name":"basic","slug":"basic","permalink":"http://ukyouz.github.io/tags/basic/"}]},{"title":"Verilog Circuits Design - 2/2","slug":"verilog/verilog-circuits-design-2-of-2","date":"2017-09-30T16:00:00.000Z","updated":"2017-10-23T17:01:56.032Z","comments":true,"path":"article/verilog/verilog-circuits-design-2-of-2.html","link":"","permalink":"http://ukyouz.github.io/article/verilog/verilog-circuits-design-2-of-2.html","excerpt":"Course Memo of digital IC design, including following contents: Low Power System Verilog Testbed Constraint and Patterns APR","keywords":null,"text":"Course Memo of digital IC design, including following contents: Low Power System Verilog Testbed Constraint and Patterns APR Lec 8 - Low Power Power Dissipation $$P_{total} = P_{static} + P_{dynamic}$$ Static Power: $P_{static}$ Static power dissipation is caused by leakeage current. $$P_{static} = I_{leakage} \\times V_{DD}$$ Sources Sub-threshold $\\propto T$ Donimate the leakage Gate Leakage $\\propto V_{DD}$ Reverse Leakage $\\propto T$ Happen when device is reverse biased To minimize Reduce voltage supply (process dependent) In general the leakage current can't be changed if process and cells are decided Dynamic Power Dominate power dissipation. $$P_{dynamic} = p_t \\times \\left( {P_D + P_{SC}} \\right)$$ $P_t$ Switching probability of clock cycle $P_D = C_{load} \\cdot V_{DD}^2 \\cdot f_{clk}$ Switching power, charging and discharging the loadgin capacitance $P_{SC} = t_{sc} \\cdot V_{DD} \\cdot I_{peak} \\cdot f_{clk}$ Short circuit power, direct path between VDD and GND when switching, both NMOS and PMOS are turned on To minimize Reduce unnecessary switching acitivities $\\Rightarrow p_t$ Gated clock (Turn off unused circuits) Register retiming State assign Reduce parastic capacitance $\\Rightarrow P_D$ Reduce $V_{DD}$, process dependent $\\Rightarrow P_D, P_{SC}$ Reduce the overlap time of PMOS and NMOS turn-on time. Ex: Keep the input signal rise/fall time the same. $\\Rightarrow P_{SC}$ Low Power Design Methodologies Reduce supply VDD: Multi Voltage Reduce leakage current: Multi Vt Reduce transition frequency (activity) Lower the clock frequency. Circuit techniques (clock gating, register retiming, …) Reduce loading capacitance $C_{load}$ Depends on layout, material, and process. Reduce short circuit current Balance the $t_{rise}$ and $t_{fall}$ of logic gate input. Multi Voltage Reduce VDD is though straightfoward, decreasing VDD would cause the circuit delay increasing. Static Voltage Scaling (SVS) Different blocks or subsystems =&gt; different fixed supply voltages Multi-level Voltage Scaling (MVS) A block or subsystem =&gt; switching between two or more voltage levels Dynamic Voltage and Frequency Scaling (DVFS) An extension of MVS where a larger # of voltage levels are dynamically switched to follow changing workloads. A level shifter may cause: Timing inaccuracy Signals are not propagated Challenges Level shifter need to be carefully designed, including the clock tree synthesis tool Timing analysis is more complex Floor planning, power planning, etc. Multi Vt As Vt decreases, sub-threshold leakage increases. Power concern: High Vt Delay concern: Low Vt With multi-Vt technology, critical path uses low-Vt logic to reduce delay, and non-critical path use path-Vt to reduce power dissipation. There are mixed of defferent Vt devices in one logic gate. Power Gating Switching between modes to maximize power saving while minimizing the impact to performance. Power gating needs a control circuit to schedule the whole procedure. A low power mode An active mode Sleep mode: shut down power to block logic Common Power Format A TCL-based power specificatioin file, consisting of commands and objects describing power intent. Clock Gating Reduce poewr consumption of registers by turn off the unused registers. Reduce the clock switching power. Methods Gated clock, bypasss data For a design on ASIC. The gated conditions should be chosen carefully. Gated data, bypass clock For a design on FPGA the clock tree is pre-generated, so it's difficult to implement dynamic gated clock scheme. To logic equivalent with dynamic gated clock design, the data gating condition should be same with above. Clock gating can be implemented by either AND- or OR- gating. The control signal can only change in specific half cycle (Low period for AND gate, high period for OR gate). Use a latch to avoid glitch. OR-gating is better_, since the gated clock is tied at high when the register is turned off. No matter data is toggling, the first latch circuit will not be toggled. However, for AND-gating, the fated clock is tied at low when the register is turned off. The first latch circuits will consume power as data input is switching. The gating control signals should be generated from clock rising edge flip-flops. Consistent with original clock rising edge triggering design Easier for timing control and analysis Lec 9 - System Verilog Design Environment testbed.sv Connecting testbench and design modules Generating clock Dump waveform design.sv Design under test pattern.sv Pattern Test program Assertion Converage Data Types 4-State Variables 10ZX Default is X if not initialized. 1logic w; // used in both assignment and procedure blocks logic No input and output restriction No continuous or block procedure restriction 12reg r;integer i; // 32-bit data type 2-State Variables 10 Defualt is 0 if not initialized. 12345bit b; // 1-bit integerbyte b_8; // 8-bit signed integershortint s; // 16-bit signed integerint i; // 32-bit signed integerlongint l; // 64-bit signed integer Enumerate Enumerate defines a set of named values, providing built-in assertion. Default data type is int. Variables are initialized to 0 if not initialized. 123456enum &#123;red, green, blue&#125; led; // red=0, green=1, blue=2enum logic [1:0] &#123;A=2'b01, B=2'10, C=2'b11&#125; class_name;typedef enum &#123;IDLE, WAIT, LOAD, RUN&#125; state;state current_state;state next_state; Structure Similar to class in C language. Group related signals to enhance readability and clearly convey designer's intent. 123456789101112struct &#123; int num; logic[3:0] address;&#125; INSTRUCT;INSTRUCT.address = 4'hff;typedef struct &#123; int a,b; state s;&#125; Core;Core CPU;CPU.state = IDLE; Package Package can include parameters, user-defined enumerates, structures, and functions. 12345678910111213141516171819202122232425262728293031323334package calculator; parameter VERSION = \"1.0\"; typedef enum &#123;ADD, SUB, MULT&#125; operation; typedef struct &#123; logic [31:0] a, b; operation op; &#125; Instruct; function automatic [31:0] multiple (input [31:0] in_a, in_b); return in_a * in_b; endfunctionendpackage/** * Use package in module */import calculator::*;module ALU ( // Without import, you need to use like: // input calculator::Instruct INS input Instruct INS, input logic clk, output logic[31:0] result );always_comb begin case (INS.op) ADD: result = INS.a + INS.b; SUB: result = INS.a - INS.b; MULT:result = multiple(INS.a, INS.b); endcaseendendmodule Procedure Blocks In Verilog, always is a general procedure block, depending on context which is not intuitive. System Verilog adds 3 new logic specific processes to show designers' intent: always_comb always_ff always_latch always_comb 1234567// Verilog 2001always@(b or c) a = b &amp; c;// System Verilogalways_comb a = b &amp; c; always_ff 12345always_ff@(posedge clk or negedge rst_n) if(!rst_n) q &lt;= 0; else q&lt;= d; Interface The interface encapsulate communication between design blocks and verifications blocks. 1234567891011121314151617interface INF; state s; logic in_valid; logic [9:0] data;endinterfacemodule m_A( input clk, INF intf_A);endmodulemodule main(input clk); INF intf(); module m_A(.clk(clk), .intf_A(intf)); // other codes…endmodule Modports Modports are used to define derection of signal inside interface. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import calculator::*;interface INF(); logic rst; logic [31:0] a, b, out; operation op; modport PATTERN( output rst, output op, output a, output b, input out ); modport DESIGN( input rst, input op, input a, input b, output out );endinterface/** * In TESTBED.sv */module TESTBED; // … INF inf(); PATTERN pattern( .clk(clk), .inf(inf.PATTERN) ); ALU design( .clk(clk), .inf(inf.DESIGN) ); // …endmodule/** * In ALU.sv */module ALU( input clk, INF.DESIGN inf); // …endmodule Program Block A program differs from a module: Only initial blocks allowed Special semantics Execute in reactive region Object-Oriented Programming Contents of an object: Data field Constructor Methods Randomization Two types of random properties: rand randc rand randc Any legal value Up to 16 bits Might repeat Cyclic repeat For randc bit values &gt; 16-bits, use concatenation. A built-in method randomize in each random class, call it to randomized data, returning 1 if successful, and 0 if randomization failed. Constraints Class properties are constrained in a constraint block. 1234567891011121314151617181920212223242526272829303132program test;class Location; rand bit[9:0] area; randc bit[8:0] lat; randc bit[8:0] lang; constraint existing &#123; area &gt; 0; lat inside &#123;[-90, 90]&#125;; lang inside &#123;[-180, 180]&#125;; &#125; constraint not_origin &#123; !(lat == 0); !(lang== 0); &#125; constraint south_east &#123; lat &lt;= 0; lang &gt;= 0; &#125;endclassLocation country;initial begin country = new(); if(!country.randomize()) $display(\"Fail to randomize.\"); else // … endendprogram Generation Code: For Useful for vector or array, generated codes are equal to printed codes. 12345678910111213genvar i;logic [1:0] counts [0:3];generate for(i=0; i&lt;4; i=i+1) begin: generate_counts always_ff@(posedge clk) begin if(inf.rst) counts[i] &lt;= 0; else counts[i] &lt;= 10-i; end endendgenerate Lec 10 Coverage Code coverages: Statement (line) Block Conditional expression Branch and dicision Toggle Finite state machine 12345678910111213141516171819covergroup coverage @(posedge clk); A_sig: coverpoint a &#123; bins big = &#123;[0:15]&#125;; // 1 state bin bins to_0 = ([1:511]=&gt;0); // 1 transition bin bins to_n [] = ([0:6]=&gt;[9:16]); // 7*8 transition bins ignore_bins no = &#123;4,6&#125;; illegal_bins fail = &#123;512&#125;; &#125; B_sig: coverpoint b; AB_cross: cross A_sig, B_sig; Result: coverpoint result &#123; // automatically 512 bins are created with equal portion option.auto_bin_max = 512; option.at_least = 16; &#125;endgroupcoverage cov = new(); The core utilization must be decided first. Usually the core utilization is higher than 85%; $$ core\\ size\\ of\\ standard\\ cell=\\frac{standard\\ cell\\ area}{core\\ utilization}$$ Core Margins leave the space for power/ground rings. $$ die\\ size=min(pad\\ total\\ width, core\\ width+core\\ margin) $$ It is called max(pad, core) limited design. Pad fillers provide power to pad and there should be no spacing between pads. Pad fillers are necessary for core limited design. Powerplan Issues Metal migration Or electro-migration. Under high current =&gt; open or short due to electron collisions with metal grains. Prevention: Sizing power supply lines to ensure chip does not fail. Expereince: Make sure current density of power ring &lt; 1mA/µm. IR drop Device runs at slower speed if IR drop, causing slower performance, setup/hold violations, less noise margin, and leakage power, is excessive. Prevention: Adding stripes. Core power ring 12345678910111213141516 | No Wire Group | Wire Group |--------------|---------------|---------------| | | | | x–––––––– VDD | x–x–––––– VDD | No | | x–––––– VDD | x–x–––––– VDD | Interleaving | | | x–––– gnd | | | x–x–– gnd | | | | | x–– gnd | | | x–x–– gnd | | | | | | | | | | | |--------------|---------------|---------------| | | | | x–––––––– VDD | x–––x–––– VDD | | | x–––––– gnd | | x–+–x–– gnd | Interleaving | | | x–––– VDD | x +–x–+–– VDD | | | | | x–– gnd | | x–+–x–– gnd | | | | | | | | | | | |--------------|---------------|---------------| Standard Cell Placement CTS Clock tree synthesis Clock problems: Heavy clock net loading Long clock insertion delay Clock skew Skew across clocks Clock to signal coupling effect Power hungry Electomigration on clock net Routing Signal integrity (SI) issues: Corsstalk Charge sharing Supply noise Leakage Propagated noise Overshoot Under shoot SI deiven route Crosstalk preventions: Placement solution Insert buffer in lines Upsize driver Congestion optimization Routing solution Limit length of parallel or reducing nets Wider wiring spacing Shield special nets Layer switching Antenna effect In a chip manufacturing process, metal is initially deposited so it covers the entire chip. Then, the unneeded portions of the metal are removed by etching, typically in plasma (charged particles). The exposed metal collect charge from plasma and form voltage potential. If the voltage potential across the gate oxide becomes large enough, the current can damage the gate oxide. $$ antenna\\ ratio=\\frac{area\\ of\\ process\\ antennas\\ on\\ a\\ node}{area\\ of\\ gates\\ to\\ node}$$ Repairments: Add jumper Add antenna cell (diode) Add buffer Lec 12 - APR II LEF defines the elements of an IC process technology and associated library of cell models. Technology LEF Containing information like placement, routing design rules, and process information for layers. Cell library LEF Containing the macro and standard cell information for a design.","raw":null,"content":null,"categories":[{"name":"RTL Design","slug":"RTL-Design","permalink":"http://ukyouz.github.io/categories/RTL-Design/"}],"tags":[{"name":"verilog","slug":"verilog","permalink":"http://ukyouz.github.io/tags/verilog/"}]},{"title":"Verilog Circuits Design - 1/2","slug":"verilog/verilog-circuits-design-1-of-2","date":"2016-11-08T16:00:00.000Z","updated":"2017-10-23T17:03:49.518Z","comments":true,"path":"article/verilog/verilog-circuits-design-1-of-2.html","link":"","permalink":"http://ukyouz.github.io/article/verilog/verilog-circuits-design-1-of-2.html","excerpt":"Course Memo of digital IC design, including following contents: Basic of Design Flow Sequential and Combination Circuit Timing Issues Intellectual Property Basic of Sythesis Flow Clock Latency","keywords":null,"text":"Course Memo of digital IC design, including following contents: Basic of Design Flow Sequential and Combination Circuit Timing Issues Intellectual Property Basic of Sythesis Flow Clock Latency Lec 1 Cell-based Design Flow Specification Development System models RTL code development Functional Vericication Synthesis Timing Verification Physical Synthesis/Place and Route Physical Verificatio Prototype Build and Test Verilog HDL Design Flow Design Specification Algorithmic Model RTL Model Gate-Level Model Switch-Level Model Physical Layout Data Type 4-value logic system: 0,1,x,z Port In a module, Input: wire Output: reg, or wire Inout: wire Useful Boolean Operators Bitwise: ~a, a&amp;b, a|b, a^b, a~^b =&gt; bit by bit Logical: !a, a&amp;&amp;b, a||b =&gt; output 1 bit, high or low Reduction: &amp;a, ~&amp;a, |a, ~|a, ^a =&gt; bit by bit Comparison: &lt;, &gt;, &lt;=, &gt;=, ==, !=, ===, !=== =&gt; output 1 bit, high or low === &amp; !== can compare with x and z value. == &amp; != just get x if there is any unkown in comparison. Combinational circuit An example: 1234567always @(*)begin if(sel) out = a; else out = b;end Coding Style Better to use wire for input and reg for output. Lec 2 Sequential Circuit Output depends not only on the current input values, but also on preceding input values. Sequential circuit example: 1234567always @(posedge clk)begin if(sel) out &lt;= a; else out &lt;= b;end Reset Synchronous 1234567always @(posedge clk)begin if (rst) a &lt;= 0; else a &lt;= b;end Pros: Glitch filtering from reset combinational logic Cons: Can’t be reset without clock signal Large area Asynchronous 1234567always @(posedge clk or posdege rst)begin if (rst) a &lt;= 0; else a &lt;= b;end Pros: Independent of clk signal Immediate reset Less area Cons: Noisy reset line could cause unwanted reset Metastability Finite State Mechine Finite state mechine can be referred to as the controller and status of the whole module Mealy machine The outputs depend on the current state and inputs. Moore machine The outputs depend on the current state only. Lec 3 Test Methodology Directed testing Time cost, not effective, find known bug Constrained random testing Find out bugs never expected Lec 4 Timing Definitions Setup time ($t_{setup}$) The time that the input signal must be stabilized before the clock edge. Hold time ($t_{hold}$) The time that the input signal must be stabilized after the clock edge. clk-to-Q contamination delay ($t_{ccq}$) The contamination time that Q is first changed after the clock edge. clk-to-Q propagation delay ($t_{pcq}$) The contamination time that Q is first changed after the clock edge. Timing Criterion Setup time margin: $t_{cycle} + t_{skew} &gt; t_{pcq} + t_{pd} + t_{setup}$ Setup violation =&gt; too many works in 1 cycle Apply &quot;pipelining&quot; Simple inline $a = b + c$. Hold time margin: $t_{ccq} + t_{tcd} &gt; t_{hold} + t_{skew}$ Hold violation =&gt; insufficent delay Pipe Line Trade-off between area and timing Lec 5 Intellectual Property (IP) IP is a design of a logic function that specifies how the elements are interconnected. Soft macro IP: Synthesizable RTL Portable and editable Unknown performance, timing, area, and power IP protection risks Firm macro IP: Netlist format Performance optimization under specific tech Need not synthesizing Hard macro IP: Hardware (LEF, GDS2 file format) Physical pathways and wiring Moving, rotating, flipping freedom, but interior fixed Memory - SRAM Read and write only Less area than register Slower than register One address only every access (single port) SRAM logic table is shown below: CEN OEN WEN Mode Q (out) Function H L x Standby keep Output remain stable L L L Write A (in) L L H Read RAM data Output at address A x H x High-Z Z operations unaffected For a memory having spec: Words Bits 600 8 You should use: Data input reg [7:0] D;. Address A reg [9:0] A;. Lec 6 Basic Synthesis Flow Develop HDL files Specify libraries Synthesize in worst case slow.db. Read Design read_verilog -rtl $DESIGN\\.v current_design $DESIGN Develop design environment Operating conditions: Process, Volt, &amp; T Wire load models: Top, Enclosed, &amp; Segmented 3 modes To estimate capacitance, resistance and area due to interconnection. System interface Set design constraints Rule constraints set_max_capacitance set_max_transition set_fanout_load set_max_fanout Optimization contraints set_clock_latency set_clock_uncertainty set_propagated_clock set_input_delay set_output_delay Select compile strategy 3 compiles: Top-down, bottom-up, &amp; mixed Optimize the design compile and compile_ultra Analyze and resolve design problems check_design, like syntax report_area report_timing Save the design database Lec 7 Clock Latency Clock source latency (outside) from clock source to clock definition point (clk) Clock network latency (inside) from clock definition point (clk) to clock pin of a flip-flop Clock Domain Crossing Data launched and captured by different(asynchronous) clock domain. Metastability The unstable status due to non-ideal data transition. An example solution to CDC design, for both &quot;fast-to-slow&quot; and &quot;slow-to-fast&quot;.","raw":null,"content":null,"categories":[{"name":"RTL Design","slug":"RTL-Design","permalink":"http://ukyouz.github.io/categories/RTL-Design/"}],"tags":[{"name":"verilog","slug":"verilog","permalink":"http://ukyouz.github.io/tags/verilog/"}]},{"title":"Verilog Combinational Circuits Design","slug":"verilog/verilog-combinational-circuits-design","date":"2016-11-08T16:00:00.000Z","updated":"2017-10-23T16:59:14.461Z","comments":true,"path":"article/verilog/verilog-combinational-circuits-design.html","link":"","permalink":"http://ukyouz.github.io/article/verilog/verilog-combinational-circuits-design.html","excerpt":"Verilog 是一種硬體描述語言（Hardware Description Langage, HDL），由於描述與執行方法和軟體不同，所以思考邏輯也不一樣。 基本的設計流程： Design Specification Algorithmic Model RTL Model Gate-Level Model Switch-Level Model Physical Layout 其中的 2 – 5 就會根據我們寫的 Verilog 程式，來合成出對應的電路。一個好的 Coding Style 、以及完善的邏輯，將可以確保電路的正常運作。","keywords":null,"text":"Verilog 是一種硬體描述語言（Hardware Description Langage, HDL），由於描述與執行方法和軟體不同，所以思考邏輯也不一樣。 基本的設計流程： Design Specification Algorithmic Model RTL Model Gate-Level Model Switch-Level Model Physical Layout 其中的 2 – 5 就會根據我們寫的 Verilog 程式，來合成出對應的電路。一個好的 Coding Style 、以及完善的邏輯，將可以確保電路的正常運作。 RTL Design - A Module 一個電路組即一個模組（Module），使用 Verilog 語言來表現我們想要的邏輯功能。Register-Transfer-Level (RTL)，意即利用暫存器（reg）所包含的資料轉移，來達成訊號的 Input/Output (IO)，暫存器之間則會有導線（wire）連接。以下是一個 Module 的範例： 123456789101112131415161718192021222324252627module synchronizer(D, Q, clk, rst_n); input D; input clk; input rst_n; output Q; reg A1, A2; assign Q = A2; always@(posedge clk or negedge rst_n) begin if(!rst_n) begin A1 &lt;= 0; end else begin A1 &lt;= D; end end always@(posedge clk or negedge rst_n) begin if(!rst_n) begin A2 &lt;= 0; end else begin A2 &lt;= A1; end endendmodule 其對應的電路 Block Diagram 是","raw":null,"content":null,"categories":[{"name":"RTL Design","slug":"RTL-Design","permalink":"http://ukyouz.github.io/categories/RTL-Design/"}],"tags":[{"name":"verilog","slug":"verilog","permalink":"http://ukyouz.github.io/tags/verilog/"}]},{"title":"PHPUnit (1) 安裝","slug":"php/phpunit-installation","date":"2016-11-01T16:00:00.000Z","updated":"2017-10-23T17:04:21.213Z","comments":true,"path":"article/php/phpunit-installation.html","link":"","permalink":"http://ukyouz.github.io/article/php/phpunit-installation.html","excerpt":"Installation For a system-wide installation via Composer, you can run: 1$ composer global require \"phpunit/phpunit=5.5.*\" In MacOS Sierra, you might need to use sudo for permission issue. After installation, you can check PHPUnit version by: 12$ phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors. If it shows up command not found, try: 1234567$ ~/.composer/vendor/bin/phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors.# Then you can use alias for short$ alias phpunit='~/.composer/vendor/bin/phpunit'$ phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors.","keywords":null,"text":"Installation For a system-wide installation via Composer, you can run: 1$ composer global require \"phpunit/phpunit=5.5.*\" In MacOS Sierra, you might need to use sudo for permission issue. After installation, you can check PHPUnit version by: 12$ phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors. If it shows up command not found, try: 1234567$ ~/.composer/vendor/bin/phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors.# Then you can use alias for short$ alias phpunit='~/.composer/vendor/bin/phpunit'$ phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors. Test PHPUnit After installation of PHPUnit, let's try use it. Create TestClass.php Make a new class TestSample TestSample inherits from PHPUnit\\Framework\\TestCase. Call method assertEquals for this test. 12345678910111213141516&lt;?phpuse PHPUnit\\Framework\\TestCase;class TestSample extends TestCase&#123; function testSample1() &#123; // assertEquals($a, $b) checks if $a == $b. $this-&gt;assertEquals(2, 1+1); &#125; function testSample2() &#123; $this-&gt;assertEquals(2, 1-1); &#125;&#125; Running Test Save php file, in terminal we can run it by command. Option --color can make syntax highlighting. 12345678910111213141516$ phpunit --color TestSample.phpPHPUnit 4.7.3 by Sebastian Bergmann and contributors. .F Time: 81 ms, Memory: 18.00Mb There was 1 failure: 1) TestSample::testSample2Failed asserting that 0 matches expected 2. /tmp/TestSample.php:10 FAILURES!Tests: 2, Assertions: 2, Failures: 1. Explaination of Result Line #4 &quot;.F&quot; tells you the overall results charactor by charactor. Mark Result . Pass F Fail Full details at here. References PHPUnit Official Documentation PHPの単体テストを自動化したかったので、phpunitを試してみた。","raw":null,"content":null,"categories":[{"name":"Web Development","slug":"Web-Development","permalink":"http://ukyouz.github.io/categories/Web-Development/"}],"tags":[{"name":"php","slug":"php","permalink":"http://ukyouz.github.io/tags/php/"},{"name":"phpunit","slug":"phpunit","permalink":"http://ukyouz.github.io/tags/phpunit/"}]},{"title":"Laravel - Blade Notes","slug":"php/laravel-blade","date":"2016-05-22T16:00:00.000Z","updated":"2017-10-23T17:04:06.829Z","comments":true,"path":"article/php/laravel-blade.html","link":"","permalink":"http://ukyouz.github.io/article/php/laravel-blade.html","excerpt":"Blade 是 Laravel 框架中所使用的切版，可以根據需求把重複的版面適當的分開，減少重複、也方便日後做維護。這邊記錄下在 Blade 之中常用到的一些函式。","keywords":null,"text":"Blade 是 Laravel 框架中所使用的切版，可以根據需求把重複的版面適當的分開，減少重複、也方便日後做維護。這邊記錄下在 Blade 之中常用到的一些函式。 切版、獲取板塊 Yield Section 12345678910&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"wrapper\"&gt; @yield('NAME') &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; At Section 12345@section('NAME') &lt;div class=\"container\"&gt; &lt;!-- --&gt; &lt;/div&gt;@stop Include Section 123&lt;div&gt; @include('NAME')&lt;/div&gt; 條件、循環 Conditional if 1234567@if ( a &gt; b ) // func …@else if ( a &gt; c ) // func …@else // func …@endif Loop for 123@foreach ( $items as $item ) // func($item)…@endforeach 其中 $item 可以是 Object 也可以是 Array。 顯示變數 1&#123;&#123; $var &#125;&#125;","raw":null,"content":null,"categories":[{"name":"Web Development","slug":"Web-Development","permalink":"http://ukyouz.github.io/categories/Web-Development/"}],"tags":[{"name":"php","slug":"php","permalink":"http://ukyouz.github.io/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"http://ukyouz.github.io/tags/laravel/"},{"name":"blade","slug":"blade","permalink":"http://ukyouz.github.io/tags/blade/"}]},{"title":"Hexo Memo","slug":"hexo-memo","date":"2016-05-17T16:00:00.000Z","updated":"2017-09-30T18:07:12.898Z","comments":true,"path":"article/hexo-memo.html","link":"","permalink":"http://ukyouz.github.io/article/hexo-memo.html","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","keywords":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start of Hexo Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment About Icarus Theme The blog theme you may fall in love with, coming to Hexo. Preview Installation 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus Icarus requires Hexo 3.0 and above. Enable Rename themes\\icarus\\_config.yml.example to themes\\icarus\\_config.yml; Copy themes\\icarus\\_config.yml.site.example to your hexo blog's root directory and rename it to _config.yml; Copy themes\\icarus\\_source\\* into your hexo blog's directory source; Then modify theme setting in _config.yml to icarus. Update 12cd themes/icarusgit pull Configuration Theme configuration example 1234567891011121314151617181920212223242526272829303132333435363738394041# Headermenu: Home: . Archives: archives Categories: categories # you need to add extra page to enable this, please see the config below. Tags: tags # you need to add extra page to enable this, please see the config below. About: about# Contentexcerpt_link: Read Morefancybox: true# Sidebarsidebar: rightwidgets:- recent_posts- category- tag- tagcloud- archivethumbnail: true# Contactscontacts: github: http://github.com/ppoffice/hexo-theme-icarus twitter: '#' facebook: '#' dribbble: '#' rss: atom.xml# Linkslinks: Hexo: http://hexo.io# Miscellaneousgoogle_analytics:favicon: favicon.pngtwitter:google_plus:fb_admins:fb_app_id: excerpt_link - Cooperate with &lt;!-- more --&gt; tag to show only part of the article in index pages. fancybox - Enable Fancybox. contacts - Your social network links, RSS link, etc. widgets - Widgets displaying in sidebar. thumbnail - Whether to show post thumbnails in the sidebar and archive pages. links - Links displayed in the link widget. google_analytics - Google Analytics ID. favicon - Favicon path. Site configuration example 123456789101112131415# Sitetitle: Icarussubtitle:description: Hexo theme - Icarusauthor: PPOfficeauthor_title: 'Web Developer &amp; Designer'avatar: css/images/avatar.pnglocation: 'Harbin, China'language: entimezone:...# Disqusdisqus_shortname: author - Your name. author_title - Title to your occupation. avatar - Your avatar image link. location - Where you live in. disqus_shortname - Your Disqus shortname. Post Thumbnail &amp; Banner You can add a thumbnail and a banner to each post by adding the following lines into your post source files' front-matter: 123456title: Demodate: 2015-01-01...# add thosethumbnail: http://example.com/thumbnail.jpgbanner: http://example.com/banner.jpg Custom Categories &amp; Tags Pages To enable custom categories page and tags page, just copy the categories folder and tags folder under your theme's _source foler into your site's source folder. Then edit theme's _config.yml and add the following lines: 123456# Headermenu: ... Categories: categories # -&gt; add this line Tags: tags # -&gt; and add this line ... Languages English and Simplified Chinese are the default languages of the theme. You can add translations in the languages folder and change the default language in blog's _config.yml. 1language: zh-CN Features Profile Sidebar A nice place to show yourself. You can add your own information in your site's _config.yml Post Banner &amp; Thumbnail Thanks to atika, you can now add thumbnails and banners to every post to create better reading experience. Responsive Layout Icarus knows on what screen size you are browsering the website, and reorganize the layout to fit your device. Custom Categories &amp; Tags Pages Get your categories and tags listed in single pages to make your blog more methodic. Fancybox Icarus uses Fancybox to showcase your photos. You can use Markdown syntax or fancybox tag plugin to add your photos. 1![img caption](img url) Sidebar Icarus provides 6 built-in widgets: recent_posts category archives tag tagcloud links All of them are enabled by default. You can edit them in widget setting. Development Requirements Grunt 0.4+ Hexo 3.0+ Grunt tasks default - Download Fancybox and Font Awesome. fontawesome - Only download Font Awesome. fancybox - Only download Fancybox. clean - Clean temporarily files and downloaded files.","raw":null,"content":null,"categories":[{"name":"Web Development","slug":"Web-Development","permalink":"http://ukyouz.github.io/categories/Web-Development/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://ukyouz.github.io/tags/hexo/"}]}]}