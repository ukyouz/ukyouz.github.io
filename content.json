{"meta":{"title":"zhung's zone","subtitle":null,"description":null,"author":"Chih-hung Cheng","url":"http://ukyouz.github.io"},"pages":[{"title":"About","date":"2016-08-27T15:13:53.000Z","updated":"2016-05-19T16:00:00.000Z","comments":true,"path":"about/index.html","permalink":"http://ukyouz.github.io/about/index.html","excerpt":"","keywords":null,"text":"Intro 現為交大電子所學生。","raw":null,"content":null}],"posts":[{"title":"Verilog Combinational Circuits Design","slug":"verilog/verilog-combinational-circuits-design","date":"2016-11-08T16:00:00.000Z","updated":"2016-11-11T17:22:09.000Z","comments":true,"path":"article/verilog/verilog-combinational-circuits-design.html","link":"","permalink":"http://ukyouz.github.io/article/verilog/verilog-combinational-circuits-design.html","excerpt":"","keywords":null,"text":"Verilog 是一種硬體描述語言（Hardware Description Langage, HDL），由於描述與執行方法和軟體不同，所以思考邏輯也不一樣。 基本的設計流程： Design Specification Algorithmic Model RTL Model Gate-Level Model Switch-Level Model Physical Layout 其中的 2 – 5 就會根據我們寫的 Verilog 程式，來合成出對應的電路。一個好的 Coding Style 、以及完善的邏輯，將可以確保電路的正常運作。 RTL Design - A Module 一個電路組即一個模組（Module），使用 Verilog 語言來表現我們想要的邏輯功能。Register-Transfer-Level (RTL)，意即利用暫存器（reg）所包含的資料轉移，來達成訊號的 Input/Output (IO)，暫存器之間則會有導線（wire）連接。以下是一個 Module 的範例： 123456789101112131415161718192021222324252627module synchronizer(D, Q, clk, rst_n); input D; input clk; input rst_n; output Q; reg A1, A2; assign Q = A2; always@(posedge clk or negedge rst_n) begin if(!rst_n) begin A1 &lt;= 0; end else begin A1 &lt;= D; end end always@(posedge clk or negedge rst_n) begin if(!rst_n) begin A2 &lt;= 0; end else begin A2 &lt;= A1; end endendmodule 其對應的電路 Block Diagram 是","raw":null,"content":null,"categories":[{"name":"RTL Design","slug":"RTL-Design","permalink":"http://ukyouz.github.io/categories/RTL-Design/"}],"tags":[{"name":"verilog","slug":"verilog","permalink":"http://ukyouz.github.io/tags/verilog/"}]},{"title":"Verilog Circuits Design - 1/2","slug":"verilog/verilog-circuits-design-1-of-2","date":"2016-11-08T16:00:00.000Z","updated":"2017-09-30T17:47:41.601Z","comments":true,"path":"article/verilog/verilog-circuits-design-1-of-2.html","link":"","permalink":"http://ukyouz.github.io/article/verilog/verilog-circuits-design-1-of-2.html","excerpt":"","keywords":null,"text":"Lec 1 Cell-based Design Flow Specification Development System models RTL code development Functional Vericication Synthesis Timing Verification Physical Synthesis/Place and Route Physical Verificatio Prototype Build and Test Verilog HDL Design Flow Design Specification Algorithmic Model RTL Model Gate-Level Model Switch-Level Model Physical Layout Data Type 4-value logic system: 0,1,x,z Port In a module, Input: wire Output: reg, or wire Inout: wire Useful Boolean Operators Bitwise: ~a, a&amp;b, a|b, a^b, a~^b =&gt; bit by bit Logical: !a, a&amp;&amp;b, a||b =&gt; output 1 bit, high or low Reduction: &amp;a, ~&amp;a, |a, ~|a, ^a =&gt; bit by bit Comparison: &lt;, &gt;, &lt;=, &gt;=, ==, !=, ===, !=== =&gt; output 1 bit, high or low === &amp; !== can compare with x and z value. == &amp; != just get x if there is any unkown in comparison. Combinational circuit An example: 1234567always @(*)begin if(sel) out = a; else out = b;end Coding Style Better to use wire for input and reg for output. Lec 2 Sequential Circuit Output depends not only on the current input values, but also on preceding input values. Sequential circuit example: 1234567always @(posedge clk)begin if(sel) out &lt;= a; else out &lt;= b;end Reset Synchronous 1234567always @(posedge clk)begin if (rst) a &lt;= 0; else a &lt;= b;end Pros: Glitch filtering from reset combinational logic Cons: Can’t be reset without clock signal Large area Asynchronous 1234567always @(posedge clk or posdege rst)begin if (rst) a &lt;= 0; else a &lt;= b;end Pros: Independent of clk signal Immediate reset Less area Cons: Noisy reset line could cause unwanted reset Metastability Finite State Mechine Finite state mechine can be referred to as the controller and status of the whole module Mealy machine The outputs depend on the current state and inputs. Moore machine The outputs depend on the current state only. Lec 3 Test Methodology Directed testing Time cost, not effective, find known bug Constrained random testing Find out bugs never expected Lec 4 Timing Definitions Setup time ($t_{setup}$) The time that the input signal must be stabilized before the clock edge. Hold time ($t_{hold}$) The time that the input signal must be stabilized after the clock edge. clk-to-Q contamination delay ($t_{ccq}$) The contamination time that Q is first changed after the clock edge. clk-to-Q propagation delay ($t_{pcq}$) The contamination time that Q is first changed after the clock edge. Timing Criterion Setup time margin: $t_{cycle} + t_{skew} &gt; t_{pcq} + t_{pd} + t_{setup}$ Setup violation =&gt; too many works in 1 cycle Apply &quot;pipelining&quot; Simple inline $a = b + c$. Hold time margin: $t_{ccq} + t_{tcd} &gt; t_{hold} + t_{skew}$ Hold violation =&gt; insufficent delay Pipe Line Trade-off between area and timing Lec 5 Intellectual Property (IP) IP is a design of a logic function that specifies how the elements are interconnected. Soft macro IP: Synthesizable RTL Portable and editable Unknown performance, timing, area, and power IP protection risks Firm macro IP: Netlist format Performance optimization under specific tech Need not synthesizing Hard macro IP: Hardware (LEF, GDS2 file format) Physical pathways and wiring Moving, rotating, flipping freedom, but interior fixed Memory - SRAM Read and write only Less area than register Slower than register One address only every access (single port) SRAM logic table is shown below: CEN OEN WEN Mode Q (out) Function H L x Standby keep Output remain stable L L L Write A (in) L L H Read RAM data Output at address A x H x High-Z Z operations unaffected For a memory having spec: Words Bits 600 8 You should use: Data input reg [7:0] D;. Address A reg [9:0] A;. Lec 6 Basic Synthesis Flow Develop HDL files Specify libraries Synthesize in worst case slow.db. Read Design read_verilog -rtl $DESIGN\\.v current_design $DESIGN Develop design environment Operating conditions: Process, Volt, &amp; T Wire load models: Top, Enclosed, &amp; Segmented 3 modes To estimate capacitance, resistance and area due to interconnection. System interface Set design constraints Rule constraints set_max_capacitance set_max_transition set_fanout_load set_max_fanout Optimization contraints set_clock_latency set_clock_uncertainty set_propagated_clock set_input_delay set_output_delay Select compile strategy 3 compiles: Top-down, bottom-up, &amp; mixed Optimize the design compile and compile_ultra Analyze and resolve design problems check_design, like syntax report_area report_timing Save the design database Lec 7 Clock Latency Clock source latency (outside) from clock source to clock definition point (clk) Clock network latency (inside) from clock definition point (clk) to clock pin of a flip-flop Clock Domain Crossing Data launched and captured by different(asynchronous) clock domain. Metastability The unstable status due to non-ideal data transition. An example solution to CDC design, for both &quot;fast-to-slow&quot; and &quot;slow-to-fast&quot;.","raw":null,"content":null,"categories":[{"name":"RTL Design","slug":"RTL-Design","permalink":"http://ukyouz.github.io/categories/RTL-Design/"}],"tags":[{"name":"verilog","slug":"verilog","permalink":"http://ukyouz.github.io/tags/verilog/"}]},{"title":"PHPUnit (1) 安裝","slug":"php/phpunit-installation","date":"2016-11-01T16:00:00.000Z","updated":"2016-11-02T13:48:16.000Z","comments":true,"path":"article/php/phpunit-installation.html","link":"","permalink":"http://ukyouz.github.io/article/php/phpunit-installation.html","excerpt":"","keywords":null,"text":"Installation For a system-wide installation via Composer, you can run: 1$ composer global require \"phpunit/phpunit=5.5.*\" In MacOS Sierra, you might need to use sudo for permission issue. After installation, you can check PHPUnit version by: 12$ phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors. If it shows up command not found, try: 1234567$ ~/.composer/vendor/bin/phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors.# Then you can use alias for short$ alias phpunit='~/.composer/vendor/bin/phpunit'$ phpunit --versionPHPUnit 5.5.7 by Sebastian Bergmann and contributors. Test PHPUnit After installation of PHPUnit, let's try use it. Create TestClass.php Make a new class TestSample TestSample inherits from PHPUnit\\Framework\\TestCase. Call method assertEquals for this test. 12345678910111213141516&lt;?phpuse PHPUnit\\Framework\\TestCase;class TestSample extends TestCase&#123; function testSample1() &#123; // assertEquals($a, $b) checks if $a == $b. $this-&gt;assertEquals(2, 1+1); &#125; function testSample2() &#123; $this-&gt;assertEquals(2, 1-1); &#125;&#125; Running Test Save php file, in terminal we can run it by command. Option --color can make syntax highlighting. 12345678910111213141516$ phpunit --color TestSample.phpPHPUnit 4.7.3 by Sebastian Bergmann and contributors. .F Time: 81 ms, Memory: 18.00Mb There was 1 failure: 1) TestSample::testSample2Failed asserting that 0 matches expected 2. /tmp/TestSample.php:10 FAILURES!Tests: 2, Assertions: 2, Failures: 1. Explaination of Result Line #4 &quot;.F&quot; tells you the overall results charactor by charactor. Mark Result . Pass F Fail Full details at here. References PHPUnit Official Documentation PHPの単体テストを自動化したかったので、phpunitを試してみた。","raw":null,"content":null,"categories":[{"name":"Web Development","slug":"Web-Development","permalink":"http://ukyouz.github.io/categories/Web-Development/"}],"tags":[{"name":"php","slug":"php","permalink":"http://ukyouz.github.io/tags/php/"},{"name":"phpunit","slug":"phpunit","permalink":"http://ukyouz.github.io/tags/phpunit/"}]},{"title":"Laravel - Blade Notes","slug":"php/laravel-blade","date":"2016-05-22T16:00:00.000Z","updated":"2016-05-23T17:30:27.000Z","comments":true,"path":"article/php/laravel-blade.html","link":"","permalink":"http://ukyouz.github.io/article/php/laravel-blade.html","excerpt":"","keywords":null,"text":"Blade 是 Laravel 框架中所使用的切版，可以根據需求把重複的版面適當的分開，減少重複、也方便日後做維護。這邊記錄下在 Blade 之中常用到的一些函式。 切版、獲取板塊 Yield Section 12345678910&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"wrapper\"&gt; @yield('NAME') &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; At Section 12345@section('NAME') &lt;div class=\"container\"&gt; &lt;!-- --&gt; &lt;/div&gt;@stop Include Section 123&lt;div&gt; @include('NAME')&lt;/div&gt; 條件、循環 Conditional if 1234567@if ( a &gt; b ) // func …@else if ( a &gt; c ) // func …@else // func …@endif Loop for 123@foreach ( $items as $item ) // func($item)…@endforeach 其中 $item 可以是 Object 也可以是 Array。 顯示變數 1&#123;&#123; $var &#125;&#125;","raw":null,"content":null,"categories":[{"name":"Web Development","slug":"Web-Development","permalink":"http://ukyouz.github.io/categories/Web-Development/"}],"tags":[{"name":"php","slug":"php","permalink":"http://ukyouz.github.io/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"http://ukyouz.github.io/tags/laravel/"},{"name":"blade","slug":"blade","permalink":"http://ukyouz.github.io/tags/blade/"}]},{"title":"Hexo Memo","slug":"hexo-memo","date":"2016-05-17T16:00:00.000Z","updated":"2016-05-23T13:14:19.000Z","comments":true,"path":"article/hexo-memo.html","link":"","permalink":"http://ukyouz.github.io/article/hexo-memo.html","excerpt":"","keywords":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. &lt;!-- more --&gt; Quick Start of Hexo Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment About Icarus Theme The blog theme you may fall in love with, coming to Hexo. Preview Installation 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus Icarus requires Hexo 3.0 and above. Enable Rename themes\\icarus\\_config.yml.example to themes\\icarus\\_config.yml; Copy themes\\icarus\\_config.yml.site.example to your hexo blog's root directory and rename it to _config.yml; Copy themes\\icarus\\_source\\* into your hexo blog's directory source; Then modify theme setting in _config.yml to icarus. Update 12cd themes/icarusgit pull Configuration Theme configuration example 1234567891011121314151617181920212223242526272829303132333435363738394041# Headermenu: Home: . Archives: archives Categories: categories # you need to add extra page to enable this, please see the config below. Tags: tags # you need to add extra page to enable this, please see the config below. About: about# Contentexcerpt_link: Read Morefancybox: true# Sidebarsidebar: rightwidgets:- recent_posts- category- tag- tagcloud- archivethumbnail: true# Contactscontacts: github: http://github.com/ppoffice/hexo-theme-icarus twitter: '#' facebook: '#' dribbble: '#' rss: atom.xml# Linkslinks: Hexo: http://hexo.io# Miscellaneousgoogle_analytics:favicon: favicon.pngtwitter:google_plus:fb_admins:fb_app_id: excerpt_link - Cooperate with &lt;!-- more --&gt; tag to show only part of the article in index pages. fancybox - Enable Fancybox. contacts - Your social network links, RSS link, etc. widgets - Widgets displaying in sidebar. thumbnail - Whether to show post thumbnails in the sidebar and archive pages. links - Links displayed in the link widget. google_analytics - Google Analytics ID. favicon - Favicon path. Site configuration example 123456789101112131415# Sitetitle: Icarussubtitle:description: Hexo theme - Icarusauthor: PPOfficeauthor_title: 'Web Developer &amp; Designer'avatar: css/images/avatar.pnglocation: 'Harbin, China'language: entimezone:...# Disqusdisqus_shortname: author - Your name. author_title - Title to your occupation. avatar - Your avatar image link. location - Where you live in. disqus_shortname - Your Disqus shortname. Post Thumbnail &amp; Banner You can add a thumbnail and a banner to each post by adding the following lines into your post source files' front-matter: 123456title: Demodate: 2015-01-01...# add thosethumbnail: http://example.com/thumbnail.jpgbanner: http://example.com/banner.jpg Custom Categories &amp; Tags Pages To enable custom categories page and tags page, just copy the categories folder and tags folder under your theme's _source foler into your site's source folder. Then edit theme's _config.yml and add the following lines: 123456# Headermenu: ... Categories: categories # -&gt; add this line Tags: tags # -&gt; and add this line ... Languages English and Simplified Chinese are the default languages of the theme. You can add translations in the languages folder and change the default language in blog's _config.yml. 1language: zh-CN Features Profile Sidebar A nice place to show yourself. You can add your own information in your site's _config.yml Post Banner &amp; Thumbnail Thanks to atika, you can now add thumbnails and banners to every post to create better reading experience. Responsive Layout Icarus knows on what screen size you are browsering the website, and reorganize the layout to fit your device. Custom Categories &amp; Tags Pages Get your categories and tags listed in single pages to make your blog more methodic. Fancybox Icarus uses Fancybox to showcase your photos. You can use Markdown syntax or fancybox tag plugin to add your photos. 1![img caption](img url) Sidebar Icarus provides 6 built-in widgets: recent_posts category archives tag tagcloud links All of them are enabled by default. You can edit them in widget setting. Development Requirements Grunt 0.4+ Hexo 3.0+ Grunt tasks default - Download Fancybox and Font Awesome. fontawesome - Only download Font Awesome. fancybox - Only download Fancybox. clean - Clean temporarily files and downloaded files.","raw":null,"content":null,"categories":[{"name":"Web Development","slug":"Web-Development","permalink":"http://ukyouz.github.io/categories/Web-Development/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://ukyouz.github.io/tags/hexo/"}]}]}